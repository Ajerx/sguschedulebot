# -*- coding: utf-8 -*-
from datetime import date, timedelta
import config
import telebot
from telebot import types
import updatebyschedule
import dbconn
import os
import soup
import botan
import createdb
import time
import sys


bot = telebot.TeleBot(config.token)


@bot.message_handler(commands=["start"])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup()
    markup.row('üìö –£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
    markup.row('üìù –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É')
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç. '
    '–≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —É–∑–Ω–∞—Ç—å —Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –û–Ω —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –°–∞—Ä–∞—Ç–æ–≤—Å–∫–æ–≥–æ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.'
                                      ' –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ.'
    , reply_markup=markup)
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    y =[]
    for key, value in soup.departments.items():
        y.append(types.InlineKeyboardButton(text="{}".format(value), callback_data="{}".format(key)))

    keyboard.add(*y)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:", reply_markup=keyboard)
    botan.track(config.botan_key, message.chat.id, message, '/start')

@bot.message_handler(regexp='^üìö –£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ$')
def send_msg(message):
    db = dbconn.sqldb(config.database)
    if not db.check_user(message.chat.id):
        bot.send_message(message.chat.id, '–Ø –µ—â–µ –Ω–µ –∑–Ω–∞—é –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã.\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "üìù –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –µ–≥–æ.')
    else:
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        today = types.InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="today")
        yesterday = types.InlineKeyboardButton(text="–í—á–µ—Ä–∞", callback_data="yesterday")
        tomorrow = types.InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data="tomorrow")
        anotherdayweek = types.InlineKeyboardButton(text="–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏", callback_data="dayweek")
        keyboard.add(today, yesterday, tomorrow, anotherdayweek)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–¥–æ —É–∑–Ω–∞—Ç—å:", reply_markup=keyboard)
    botan.track(config.botan_key, message.chat.id, message, 'üìö –£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')



@bot.message_handler(regexp='^üìù –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É$')
def change_msg(message):
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    y = []
    for key, value in soup.departments.items():
        y.append(types.InlineKeyboardButton(text="{}".format(value), callback_data="{}".format(key)))

    keyboard.add(*y)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:", reply_markup=keyboard)
    botan.track(config.botan_key, message.chat.id, message, 'üìù –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É')

@bot.message_handler(commands=["help"])
@bot.message_handler(content_types='text')
def any_msg(message):
    markup = types.ReplyKeyboardMarkup()
    markup.row('üìö –£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
    markup.row('üìù –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É')
    bot.send_message(message.chat.id, u'–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–∑–Ω–∞—Ç—å –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\n'
                                      u'–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ "üìö –£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –¥–∞—Ç—É.\n'
                                      u'–í—ã –º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É, –Ω–∞–∂–∞–≤ "üìù –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É" –∏ –≤—ã–±—Ä–∞–≤ —Å–≤–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç, –∫—É—Ä—Å –∏ –≥—Ä—É–ø–ø—É.\n', reply_markup=markup)
    botan.track(config.botan_key, message.chat.id, message, '/help or other message')


@bot.callback_query_handler(func=lambda msg: msg.data in (soup.departments.keys())) #choose course
def callback_inline(call):

    #call.data is a department

    db = dbconn.sqldb(config.database)

    keyboard = types.InlineKeyboardMarkup(row_width=3)
    k = []
    for course_rus, course_eng in db.select_course_by_department(call.data):
        k.append(types.InlineKeyboardButton(text="{}".format(course_rus), callback_data="{}".format(call.data + '+' + course_eng)))
    keyboard.add(*k)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:")

    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=keyboard)

@bot.callback_query_handler(func=lambda msg: msg.data in
                                             [i + '+' + course for course in
                                              dbconn.sqldb(config.database).select_distinct_course() for i in
                                              soup.departments.keys()]) #choose group
def callback_date(call):
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    groups = []
    for url, group_rus in dbconn.sqldb(config.database).select_url_groups_by_department_and_course(call.data.split('+')[0], call.data.split('+')[1]):
        groups.append(types.InlineKeyboardButton(text="{}".format(group_rus), callback_data="{}".format(url)))
    keyboard.add(*groups)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:")

    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=keyboard)

@bot.callback_query_handler(func=lambda msg: msg.data in ('today','yesterday','tomorrow',
                                                          'dayweek','monday','tuesday','wednesday','thursday','friday','saturday','sunday'))
def callback_date(call):
    dayweeks = {0: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 1: '–≤—Ç–æ—Ä–Ω–∏–∫', 2: '—Å—Ä–µ–¥–∞', 3: '—á–µ—Ç–≤–µ—Ä–≥', 4: '–ø—è—Ç–Ω–∏—Ü–∞', 5: '—Å—É–±–±–æ—Ç–∞', 6: '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'}
    dayweeks_eng_number = {'monday': 0, 'tuesday': 1, 'wednesday' : 2, 'thursday': 3, 'friday':4, 'saturday':5, 'sunday':6}
    dayweeks_eng_rus = {'monday': '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'tuesday': '–≤—Ç–æ—Ä–Ω–∏–∫',
                    'wednesday': '—Å—Ä–µ–¥—É', 'thursday': '—á–µ—Ç–≤–µ—Ä–≥', 'friday': '–ø—è—Ç–Ω–∏—Ü—É', 'saturday': '—Å—É–±–±–æ—Ç—É', 'sunday': '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'}

    db = dbconn.sqldb(config.database)
    if call.data == 'today':
        bot.edit_message_text(chat_id=call.message.chat.id,  message_id=call.message.message_id, text =
                         '*–°–µ–≥–æ–¥–Ω—è {0}, {1}.\n\n–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è ‚Äì {2}.\n\n*–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n'.format(
                             date.today().strftime('%d-%m-%Y'),
                             dayweeks[date.today().weekday()],
                             '–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å' if date.today().isocalendar()[1] % 2 == 0
                             else '—á–∏—Å–ª–∏—Ç–µ–ª—å')
                         + db.get_schedule(call.message.chat.id, date.today().weekday())[0][0],
                         parse_mode='Markdown')
    elif call.data == 'yesterday':
        yesterday = date.today() + timedelta(days=-1)
        bot.edit_message_text(chat_id=call.message.chat.id,  message_id=call.message.message_id, text =
                         '*–í—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å: {1}, {0}.\n\n–ù–µ–¥–µ–ª—è ‚Äì {2}.\n\n*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n'.format(
                             yesterday.strftime('%d-%m-%Y'),
                             dayweeks[yesterday.weekday()],
                             '–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å' if yesterday.isocalendar()[1] % 2 == 0
                             else '—á–∏—Å–ª–∏—Ç–µ–ª—å')
                         + db.get_schedule(call.message.chat.id, yesterday.weekday())[0][0],
                         parse_mode='Markdown')
    elif call.data == 'tomorrow':
        tomorrow = date.today() + timedelta(days=1)
        bot.edit_message_text(chat_id=call.message.chat.id,  message_id=call.message.message_id, text =
                         '*–ó–∞–≤—Ç—Ä–∞: {1}, {0}.\n\n–ù–µ–¥–µ–ª—è ‚Äì {2}.\n\n*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n'.format(
                             tomorrow.strftime('%d-%m-%Y'),
                             dayweeks[tomorrow.weekday()],
                             '–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å' if tomorrow.isocalendar()[1] % 2 == 0
                             else '—á–∏—Å–ª–∏—Ç–µ–ª—å')
                         + db.get_schedule(call.message.chat.id, tomorrow.weekday())[0][0],
                         parse_mode='Markdown')
    elif call.data == 'dayweek':
        dayweeks_number_eng = {0: 'monday', 1: 'tuesday', 2: 'wednesday', 3: 'thursday', 4: 'friday', 5: 'saturday',
                               6: 'sunday'}
        keyboard = types.InlineKeyboardMarkup(row_width=3)
        k = []
        for i in dayweeks.keys():
            k.append(types.InlineKeyboardButton(text="{}".format(dayweeks[i].capitalize()), callback_data=dayweeks_number_eng[i]))
        keyboard.add(*k)
        bot.edit_message_text(chat_id=call.message.chat.id,  message_id=call.message.message_id, text =
                         '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:',
                         parse_mode='Markdown')
        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      reply_markup=keyboard)


    elif call.data in ('monday','tuesday','wednesday','thursday','friday','saturday','sunday'):
        bot.edit_message_text(chat_id=call.message.chat.id,  message_id=call.message.message_id, text =
                         '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {}:\n\n'.format(dayweeks_eng_rus[call.data])
                         + db.get_schedule(call.message.chat.id, dayweeks_eng_number[call.data])[0][0],
                         parse_mode='HTML')

@bot.callback_query_handler(func=lambda msg: msg.data in dbconn.sqldb(config.database).select_url_from_groups())  # confirm group
def callback_date(call):
    db = dbconn.sqldb(config.database)

    dep_and_group = db.select_by_url(call.data)


    if db.check_user(call.message.chat.id):
        db.update_user_schedule(call.message.chat.id,
                                call.data)
    else:
        db.insert_user_schedule(call.message.chat.id,
                                call.from_user.first_name + ("" if call.from_user.last_name is None else " " + call.from_user.last_name) + ("" if call.from_user.username is None else "  @" + call.from_user.username),
                                call.data)

    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text="–ì–æ—Ç–æ–≤–æ! –í–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç - {0}. –í–∞—à–∞ –≥—Ä—É–ø–ø–∞ - {1}."
                          .format(dep_and_group[0], dep_and_group[1]))



if __name__ == '__main__':
    createdb.createtables()
    soup.get_groups()
    os.makedirs('./schedule', exist_ok=True)
    updatebyschedule.sched()
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            print('Error occurred:')
            print(sys.stderr, str(e))
            time.sleep(10)
